===============================================
How to Run and Write Integration Tests for Kete
===============================================

-----
Setup
-----

Run the following rake command to install the necessary gems
  rake manage_gems:testing:install

-------------
Running Tests
-------------

To run tests, change into the project root, and run the following rake command
  rake test:integration

-------------
Writing Tests
-------------

The basic premise is to add a separate test suite for each context you want test in. For
instance if you want to write a test for User Portraits, you might add a test suite named
UserPortraitTest in test/integration/user_portrait_test.rb. In that test you might have
something like the following:

  # The test must extend ActionController::IntegrationTest to get all of the Webrat goodies..
  class UserTest < ActionController::IntegrationTest
    context "A user instance" do
      # Configure any environment specifics you need in the context of the test you want to run
      setup do
        # configure_environment allows you to configure any environmental specifics you need for
        # the test sweet and then reloads the routing afterwards.
        configure_environment do

          # set_constant allows you to overwrite a constant with another value without receiving
          # any warnings, etc.
          set_constant :SystemSetting.enable_user_portraits?, true
        end
      end

      # Add your tests here, using shoulda for setting out in test contexts, etc.
      should "have a default portrait image for a user" do
        assert blah, blah
      end
    end
  end

ActionController::IntegrationTest#teardown is overloaded so that the environment (constants, etc)
are reset between tests suites to avoid conflicts.

-------
Helpers
-------

There are a bunch of methods that help with test creation. To view them (and their documentation) see the following files:

test/integration/integration_test_helper.rb
test/common_test_helpers.rb

Each test can specify it's own private methods are well, so when you edit a file, check them out before you start.

-------
Conventions
-------

Don't use elevated roles (site admin, tech admin, admin, moderator) unless your test requires it to recreate the situation you are testing.  Regular users are the most common type of user on real sites and therefore should have their circumstancs as thoroughly tested as possible.  Using a test user with an elevated role, such as site admin, may also undermine the intent of your test.  For example if you are testing whether a non-member of a basket can view items private to basket members, but you use a site admin user who can see anything anywhere, you will get false failures.

---------
Factories
---------

When you make a new user via methods like add_joe_as_super_user, it uses factories to create a user.

We use these factories in place of Fixtures and the traditional User.create. If you need
data in various places please make a Factory instead of create methods throughout the code.

----------------
More Information
----------------

A lot of the methods used in the tests comes from the Webrat, shoulda and factory-girl gems. Read more about each at:

Webrat:
  Docs: http://gitrdoc.com/brynary/webrat/
  Source: http://github.com/brynary/webrat/
Shoulda:
  Homepage: http://www.thoughtbot.com/projects/shoulda/
  Docs: http://dev.thoughtbot.com/shoulda/
  Source: http://github.com/thoughtbot/shoulda/
Factory-girl:
  Homepage: http://www.thoughtbot.com/projects/factory_girl/
  Docs: http://dev.thoughtbot.com/factory_girl/
  Source: http://github.com/thoughtbot/factory_girl/


Have fun testing!
